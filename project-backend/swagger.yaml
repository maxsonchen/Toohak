swagger: "2.0"
info:
  title: Toohak API
  description: |
    API description in for Toohak.
    All error strings are required to be clear descriptive message. The descriptive message won't change the marks you receive when being automarked as long as you make an attempt for each one to be custom, but they will improve the usability of the frontend.
    See the schema tab for greater explanations on each attribute of an object.
  version: 1.0.0
 
schemes:
  - http

tags:
  - name: "Iteration 2 (Using Iteration 1)"
    description: Iteration 2 routes that leverage work done in iteration 1
  - name: "Iteration 2 (New)"
    description: Iteration 2 routes that are new
  - name: "Iteration 3 (Modified)"
    description: Iteration 3 routes are a modification of iteration 1 and iteration 2 routes
  - name: "Iteration 3 (New)"
    description: Iteration 3 routes that are a mix of new routes as well as slightly modified routes from iteration 1 and 2

components:
  prim:
    ErrorMessage:
      type: string
      example: "Descriptive error message here"
    ErrorType:
      type: string
      example: "ERROR_TYPE"
    Email:
      type: string
      example: yuchao.jiang@unsw.edu.au
    Password:
      type: string
      example: yuchaojiang123
    NameFirst:
      type: string
      example: Yuchao
    NameLast:
      type: string
      example: Jiang
    Session:
      type: string
      example: 23748
    ResetCode:
      type: string
      example: asdf89ajf2348905j9834
    GameId:
      type: integer
      example: 5546
    PlayerId:
      type: integer
      example: 5546
    QuestionId:
      type: integer
      example: 5546
    QuestionPosition:
      type: integer
      example: 3
    QuizId:
      type: integer
      example: 5546
    AnswerId:
      type: integer
      example: 2384
    Action:
      type: string
      enum: [NEXT_QUESTION, SKIP_COUNTDOWN, GO_TO_ANSWER, GO_TO_FINAL_RESULTS, END]
    State:
      type: string
      enum: [LOBBY, QUESTION_COUNTDOWN, QUESTION_OPEN, QUESTION_CLOSE, ANSWER_SHOW, FINAL_RESULTS, END]
    Url:
      type: string
      example: http://google.com/some/image/path.jpg
    Timestamp:
      type: integer
      example: 1683019484
      description: In seconds. You can find more information that here https://en.wikipedia.org/wiki/Unix_time
    QuizQuestion:
      type: string
      example: Who is the Monarch of England?
    QuizQuestionDuration:
      type: integer
      example: 4
      description: Duration of question in seconds
    QuizQuestionPoints:
      type: integer
      example: 5
    QuizQuestionAnswersLite:
      type: array
      items:
        type: object
        properties:
          answer:
            type: string
            example: Prince Charles
          correct:
            type: boolean
            example: true
    QuizQuestionAnswers:
      type: array
      items:
        type: object
        properties:
          answerId:
            $ref: '#/components/prim/AnswerId'
          answer:
            type: string
            example: Prince Charles
          colour:
            $ref: '#/components/prim/Colour'
          correct:
            type: boolean
            example: true
      description: 'Note: answers can be return in any order'
    QuizQuestionAnswersPublic:
      type: array
      items:
        type: object
        properties:
          answerId:
            $ref: '#/components/prim/AnswerId'
          answer:
            type: string
            example: Prince Charles
          colour:
            $ref: '#/components/prim/Colour'
      description: 'Note: answers can be returned in any order'
    Colour:
      type: string
      enum: [red, blue, green, yellow, purple, pink, orange] 
      description: The colour of a particular question's answerOptions (generated randomly everytime a quiz question is created or updated). Colours only need to be updated on specific routes that clearly state this.
    Duration:
      type: integer
      example: 4
      description: Sum of all question timeLimits in seconds
    AtQuestion:
      type: integer
      example: 3
      description: The current question that has been advanced to in the quiz, where 1 is the first question. If the quiz is in either LOBBY, FINAL_RESULTS, or END state then the value is 0.
    NumQuestions:
      type: integer
      example: 1
      description: The current number of questions in this quiz game
  group:
    User:
      type: object
      properties:
        userId:
          type: integer
          example: 132
        name:
          type: string
          example: Yuchao Jiang
        email:
          type: string
          example: rani@unsw.edu.au
        numSuccessfulLogins:
          type: integer
          example: 5
        numFailedPasswordsSinceLastLogin:
          type: integer
          example: 2
    SmallQuizzes:
      type: array
      items:
        type: object
        properties:
          quizId:
            $ref: '#/components/prim/QuizId'
          name:
            type: string
            example: My Quiz Name

    QuizIter2:
      type: object
      properties:
        quizId:
          $ref: '#/components/prim/QuizId'
        name:
          type: string
          example: This is the name of the quiz
        timeCreated:
          $ref: '#/components/prim/Timestamp'
        timeLastEdited:
          $ref: '#/components/prim/Timestamp'
        description:
          type: string
          example: This quiz is so we can have a lot of fun
        numQuestions:
          $ref: '#/components/prim/NumQuestions'
        questions:
          type: array
          items:
            $ref: '#/components/group/QuizQuestionIter2'
        timeLimit:
          $ref: '#/components/prim/Duration'

    QuizIter3:
      type: object
      properties:
        quizId:
          $ref: '#/components/prim/QuizId'
        name:
          type: string
          example: This is the name of the quiz
        timeCreated:
          $ref: '#/components/prim/Timestamp'
        timeLastEdited:
          $ref: '#/components/prim/Timestamp'
        description:
          type: string
          example: This quiz is so we can have a lot of fun
        numQuestions:
          $ref: '#/components/prim/NumQuestions'
        questions:
          type: array
          items:
            $ref: '#/components/group/QuizQuestion'
        timeLimit:
          $ref: '#/components/prim/Duration'
        thumbnailUrl:
          $ref: '#/components/prim/Url'

    QuizQuestion:
      type: object
      properties:
        questionId:
          $ref: '#/components/prim/QuestionId'
        question:
          $ref: '#/components/prim/QuizQuestion'
        timeLimit:
          $ref: '#/components/prim/QuizQuestionDuration'
        thumbnailUrl:
          $ref: '#/components/prim/Url'
        points:
          $ref: '#/components/prim/QuizQuestionPoints'
        answerOptions:
          $ref: '#/components/prim/QuizQuestionAnswers'
    QuizQuestionIter2:
      type: object
      properties:
        questionId:
          $ref: '#/components/prim/QuestionId'
        question:
          $ref: '#/components/prim/QuizQuestion'
        timeLimit:
          $ref: '#/components/prim/QuizQuestionDuration'
        points:
          $ref: '#/components/prim/QuizQuestionPoints'
        answerOptions:
          $ref: '#/components/prim/QuizQuestionAnswers'
    QuizQuestionPublic:
      type: object
      properties:
        questionId:
          $ref: '#/components/prim/QuestionId'
        question:
          $ref: '#/components/prim/QuizQuestion'
        timeLimit:
          $ref: '#/components/prim/QuizQuestionDuration'
        thumbnailUrl:
          $ref: '#/components/prim/Url'
        points:
          $ref: '#/components/prim/QuizQuestionPoints'
        answerOptions:
          $ref: '#/components/prim/QuizQuestionAnswersPublic'
    QuestionMutateIter2: # Does not have thumbnail URL
      type: object
      properties:
        question:
          $ref: '#/components/prim/QuizQuestion'
        timeLimit:
          $ref: '#/components/prim/QuizQuestionDuration'
        points:
          $ref: '#/components/prim/QuizQuestionPoints'
        answerOptions:
          $ref: '#/components/prim/QuizQuestionAnswersLite'
    QuestionMutateIter3: # Has thumbnail URL
      type: object
      properties:
        question:
          $ref: '#/components/prim/QuizQuestion'
        timeLimit:
          $ref: '#/components/prim/QuizQuestionDuration'
        points:
          $ref: '#/components/prim/QuizQuestionPoints'
        answerOptions:
          $ref: '#/components/prim/QuizQuestionAnswersLite'
        thumbnailUrl:
          $ref: '#/components/prim/Url'

    QuestionResults:
      type: object
      properties:
        questionId:
          $ref: '#/components/prim/QuestionId'
        playersCorrect:
          type: array
          items:
            type: string
            example: Yuchao
            description: List of the name of players
          description: This array is ordered in ascending alphabetical order of player name
        averageAnswerTime:
          type: integer
          example: 45
          description: The average answer time for the question across all players who attempted the question, rounded to the nearest second. If no answers are submitted then the value is 0.
        percentCorrect:
          type: integer
          example: 54
          description: A percentage rounded to the nearest whole number that describes the percentage of players that got the question completely correct.

    ResultsFinal:
      type: object
      properties:
        usersRankedByScore:
          type: array
          items:
            type: object
            properties:
              playerName:
                type: string
                example: Yuchao
                description: The name of the player that is a top ranker
              score:
                type: number
                example: 45
                description: The final score for the user, must be a whole number/integer.
          description: A list of all users who played ranked in descending order by score
        questionResults:
          type: array
          items:
            $ref: '#/components/group/QuestionResults'

  path:
    PlayerId:
      in: path
      name: playerid
      required: true
      schema:
        $ref: '#/components/prim/PlayerId'
    QuestionId:
      in: path
      name: questionid
      required: true
      schema:
        $ref: '#/components/prim/QuestionId'
    QuestionPosition:
      in: path
      name: questionposition
      required: true
      schema:
        $ref: '#/components/prim/QuestionPosition'
    QuizId:
      in: path
      name: quizid
      required: true
      schema:
        $ref: '#/components/prim/QuizId'
    GameId:
      in: path
      name: gameid
      required: true
      schema:
        $ref: '#/components/prim/GameId'
  header:
    Session:
      in: header
      name: session
      required: true
      schema:
        type: string
  query:
    Session:
      in: query
      name: session
      required: true
      schema:
        type: string
  body:
    Session:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          session:
            $ref: '#/components/prim/Session'
    Register:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          email:
            $ref: '#/components/prim/Email'
          password:
            $ref: '#/components/prim/Password'
          nameFirst:
            $ref: '#/components/prim/NameFirst'
          nameLast:
            $ref: '#/components/prim/NameLast'
    Login:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          email:
            $ref: '#/components/prim/Email'
          password:
            $ref: '#/components/prim/Password'
    PasswordResetRequest:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          email:
            $ref: '#/components/prim/Email'
    PasswordResetReset:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          resetCode:
            $ref: '#/components/prim/ResetCode'
          password:
            $ref: '#/components/prim/Password'
    UserPasswordIter3:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          oldPassword:
            $ref: '#/components/prim/Password'
          newPassword:
            $ref: '#/components/prim/Password'
    UserDetailsPutIter3:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          email:
            $ref: '#/components/prim/Email'
          nameFirst:
            $ref: '#/components/prim/NameFirst'
          nameLast:
            $ref: '#/components/prim/NameLast'
    QuizList:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          session:
            $ref: '#/components/prim/Session'
    QuizNewIter3:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          name:
            type: string
            example: My Quiz Name
          description:
            type: string
            example: A description of my quiz
    QuizUpdateNameIter3:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          name:
            type: string
            example: My Quiz Name
    QuizUpdateDescriptionIter3:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          description:
            type: string
            example: A description of my quiz
    QuizRestore:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          session:
            $ref: '#/components/prim/Session'
    QuizThumbnail:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          thumbnailUrl:
            $ref: '#/components/prim/Url'
    QuizQuestionMutateIter2:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          questionBody:
            $ref: '#/components/group/QuestionMutateIter2'
    QuizQuestionMutateIter3:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          questionBody:
            $ref: '#/components/group/QuestionMutateIter3'
    QuizQuestionDelete:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          session:
            $ref: '#/components/prim/Session'
    QuizGameStartIter3:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          autoStartNum:
            type: integer 
            example: 3
            description: autostartNum is number of people to autostart the quiz once that number of people join. If this number is 0, then no auto start will occur.
    QuizGameMutateIter3:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          action:
            $ref: '#/components/prim/Action'
    QuizGameStatus:
      in: query
      name: game
      required: true
      schema:
        session:
          $ref: '#/components/prim/Session'
    PlayerJoin:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          gameId:
            type: integer
            example: 234234
          playerName:
            type: string
            example: Yuchao Jiang
    PlayerQuestionAnswer:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          answerIds:
            type: array
            items:
              $ref: '#/components/prim/AnswerId'

  return:
    Session:
      type: object
      properties:
        session:
          $ref: '#/components/prim/Session'
    Error:
      properties:
        error:
          type: string
            - error
          $ref: '#/components/prim/ErrorType'
        message:
          type: string
            - message
          $ref: '#/components/prim/ErrorMessage'
    Empty:
      type: object
    User:
      type: object
      properties:
        user:
          $ref: '#/components/group/User'
    QuizList:
      type: object
      properties:
        quizzes:
          $ref: '#/components/group/SmallQuizzes'
    QuizNew:
      type: object
      properties:
        quizId:
          $ref: '#/components/prim/QuizId'
    QuizSingleIter2:
      $ref: '#/components/group/QuizIter2'
    QuizSingleIter3:
      $ref: '#/components/group/QuizIter3'
    QuizQuestionNew:
      type: object
      properties:
        questionId:
          $ref: '#/components/prim/QuestionId'
    QuestionSuggestion:
      type: object
      properties:
        question:
          $ref: '#/components/prim/QuizQuestion'
    QuizGameStart:
      type: object
      properties:
        gameId:
          $ref: '#/components/prim/GameId'
    QuizGameStatus:
      type: object
      properties:
        state:
          $ref: '#/components/prim/State'
        atQuestion:
          $ref: '#/components/prim/AtQuestion'
        players:
          type: array
          items:
            type: string
            example: Yuchao
            description: Name of a player
          description: Names of all the players in the quiz game, ordered in ascending order of player name
        metadata:
          $ref: '#/components/group/QuizIter3'
    QuizGamesList:
      type: object
      properties:
        activeGames:
          type: array
          description: List of active quiz game ids (games that are not in the END state), sorted in ascending order
          example: [247, 566, 629, 923]
          items:
            $ref: '#/components/prim/GameId'
        inactiveGames:
          type: array
          description: List of inactive quiz game ids (games that are in the END state), sorted in ascending order
          example: [422, 817]
          items:
            $ref: '#/components/prim/GameId'

    PlayerJoin:
      type: object
      properties: 
        playerId:
          $ref: '#/components/prim/PlayerId'          
    PlayerStatus:
      type: object
      properties:
        state:
          $ref: '#/components/prim/State'
        numQuestions:
          $ref: '#/components/prim/NumQuestions'
        atQuestion:
          $ref: '#/components/prim/AtQuestion'
    ResultsFinal:
      $ref: '#/components/group/ResultsFinal'

paths:

  /v1/admin/auth/register:
    post:
      summary: Register a new admin user
      description: Takes in information about a new admin user and registers them in the system. This route is not relevant to guests who want to play a particular quiz, but is used for the creation of accounts of people who manage quizzes.
      tags:
        # - "By Topic: Access Management"
        - "Iteration 2 (Using Iteration 1)"
      parameters:
        - $ref: '#/components/body/Register'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Session'
        400:
          description: |
            If any of the following are true:
            - **INVALID_EMAIL**
              - Email address is used by another user
              - Email does not satisfy this: https://www.npmjs.com/package/validator (validator.isEmail)
            - **INVALID_FIRST_NAME**
              - NameFirst contains characters other than lowercase letters, uppercase letters, spaces, hyphens, or apostrophes
              - NameFirst is less than 2 characters or more than 20 characters
            - **INVALID_LAST_NAME**
              - NameLast contains characters other than lowercase letters, uppercase letters, spaces, hyphens, or apostrophes
              - NameLast is less than 2 characters or more than 20 characters
            - **INVALID_PASSWORD**
              - Password is less than 8 characters
              - Password does not contain at least one number and at least one letter
          schema:
            $ref: '#/components/return/Error'
                
  /v1/admin/auth/login:
    post:
      summary: Login an admin user
      description: Takes in information about an admin user to determine if they can log in to manage quizzes. This route is not relevant to guests who want to play a particular quiz, but is used for the creation of accounts of people who manage quizzes. 
      tags:
        # - "By Topic: Access Management"
        - "Iteration 2 (Using Iteration 1)"
      parameters:
        - $ref: '#/components/body/Login'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Session'
        400:
          description: |
            If any of the following are true:
            - **INVALID_CREDENTIALS**
              - Email address does not exist
              - Password is not correct for the given email
          schema:
            $ref: '#/components/return/Error'

  /v1/admin/auth/logout:
    post:
      summary: Logs out an admin user who has an active user session.
      description: Should be called with a session that is returned after either a login or register has been made.
      tags:
        # - "By Topic: Access Management"
        - "Iteration 2 (New)"
      parameters:
        - $ref: '#/components/header/Session'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'

  /v1/admin/user/details:
    get:
      summary: Get the details of an admin user.
      description: For the given admin user that is logged in, return all of the relevant details.
      tags:
        # - "By Topic: Access Management"
        - "Iteration 2 (Using Iteration 1)"
      parameters:
        - $ref: '#/components/header/Session'
      responses:
        200:
          description: |
            - "name" is the first and last name concatenated with a single space between them
            - numSuccessfulLogins includes logins direct via registration, and is counted from the moment of registration starting at 1
            - numFailedPasswordsSinceLastLogin is reset every time they have a successful login, and simply counts the number of attempted logins that failed due to incorrect password, only since the last login
          schema:
            $ref: '#/components/return/User'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
    put:
      summary: Update the details of an admin user.
      description: Given a set of properties, update those properties of this logged in admin user.
      tags:
        # - "By Topic: Access Management"
        - "Iteration 2 (Using Iteration 1)"
      parameters:
        - $ref: '#/components/header/Session'
        - $ref: '#/components/body/UserDetailsPutIter3'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            If any of the following are true:
            - **INVALID_EMAIL**
              - Email is currently used by another user (excluding the current authorised user)
              - Email does not satisfy this: https://www.npmjs.com/package/validator (validator.isEmail)
            - **INVALID_FIRST_NAME**
              - NameFirst contains characters other than lowercase letters, uppercase letters, spaces, hyphens, or apostrophes
              - NameFirst is less than 2 characters or more than 20 characters
            - **INVALID_LAST_NAME**
              - NameLast contains characters other than lowercase letters, uppercase letters, spaces, hyphens, or apostrophes
              - NameLast is less than 2 characters or more than 20 characters
          schema:
            $ref: '#/components/return/Error'
  
  /v1/admin/user/password:
    put:
      summary: Update the password of this admin user.
      description: Given details relating to a password change, update the password of a logged in user.
      tags:
        # - "By Topic: Access Management"
        - "Iteration 2 (Using Iteration 1)"
      parameters:
        - $ref: '#/components/header/Session'
        - $ref: '#/components/body/UserPasswordIter3'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            If any of the following are true:
            - **INVALID_OLD_PASSWORD**
              - Old Password is not the correct old password
            - **INVALID_NEW_PASSWORD**
              - Old Password and New Password match exactly
              - New Password has already been used before by this user
              - New Password is less than 8 characters
              - New Password does not contain at least one number and at least one letter
          schema:
            $ref: '#/components/return/Error'
        



  /v1/admin/quiz/list:
    get:
      summary: Lists all user's quizzes
      description: Provide a list of all quizzes that are owned by the currently logged in user
      tags:
        # - "By Topic: Quiz Management"
        - "Iteration 2 (Using Iteration 1)"
      parameters:
        - $ref: '#/components/header/Session'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/QuizList'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'

  /v1/admin/quiz:
    post:
      summary: Create a new quiz
      description: Given basic details about a new quiz, create one for the logged in user
      tags:
        # - "By Topic: Quiz Management"
        - "Iteration 2 (Using Iteration 1)"
      parameters:
        - $ref: '#/components/header/Session'
        - $ref: '#/components/body/QuizNewIter3'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/QuizNew'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            If any of the following are true:
            - **INVALID_QUIZ_NAME**
              - Name contains invalid characters. Valid characters are alphanumeric and spaces
              - Name is either less than 3 characters long or more than 30 characters long
            - **DUPLICATE_QUIZ_NAME**
              - Name is already used by the current logged in user for another quiz
            - **INVALID_DESCRIPTION**
              - Description is more than 100 characters in length (note: empty strings are OK)
          schema:
            $ref: '#/components/return/Error'

  /v1/admin/quiz/{quizid}:
    delete:
      summary: Delete a quiz
      description: |
       - Given a particular quiz, delete a quiz
      tags:
        # - "By Topic: Quiz Management"
        - "Iteration 2 (Using Iteration 1)"
      parameters:
        - $ref: '#/components/path/QuizId'
        - $ref: '#/components/header/Session'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        403:
          description: |
            - **INVALID_QUIZ_ID**
              - Valid session is provided, but user is not an owner of this quiz, or quiz doesn't exist
          schema:
            $ref: '#/components/return/Error'
    get:
      summary: Get info about current quiz
      description: Get all of the relevant information about the current quiz including questions
      tags:
        # - "By Topic: Quiz Management"
        - "Iteration 2 (Using Iteration 1)"
      parameters:
        - $ref: '#/components/path/QuizId'
        - $ref: '#/components/header/Session'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/QuizSingleIter3'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        403:
          description: |
            - **INVALID_QUIZ_ID**
              - Valid session is provided, but user is not an owner of this quiz, or quiz doesn't exist
          schema:
            $ref: '#/components/return/Error'

  /v1/admin/quiz/{quizid}/name:
    put:
      summary: Update quiz name
      description: Update the name of the relevant quiz
      tags:
        # - "By Topic: Quiz Management"
        - "Iteration 2 (Using Iteration 1)"
      parameters:
        - $ref: '#/components/path/QuizId'
        - $ref: '#/components/header/Session'
        - $ref: '#/components/body/QuizUpdateNameIter3'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        403:
          description: |
            - **INVALID_QUIZ_ID**
              - Valid session is provided, but user is not an owner of this quiz, or quiz doesn't exist
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            If any of the following are true:
            - **INVALID_QUIZ_NAME**
              - Name contains invalid characters. Valid characters are alphanumeric and spaces
              - Name is either less than 3 characters long or more than 30 characters long
            - **DUPLICATE_QUIZ_NAME**
              - Name is already used by the current logged in user for another quiz
          schema:
            $ref: '#/components/return/Error'

  /v1/admin/quiz/{quizid}/description:
    put:
      summary: Update quiz description
      description: Update the description of the relevant quiz
      tags:
        # - "By Topic: Quiz Management"
        - "Iteration 2 (Using Iteration 1)"
      parameters:
        - $ref: '#/components/header/Session'
        - $ref: '#/components/path/QuizId'
        - $ref: '#/components/body/QuizUpdateDescriptionIter3'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        403:
          description: |
            - **INVALID_QUIZ_ID**
              - Valid session is provided, but user is not an owner of this quiz, or quiz doesn't exist
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            If any of the following are true:
            - **INVALID_DESCRIPTION**
              - Description is more than 100 characters in length (note: empty strings are OK)
          schema:
            $ref: '#/components/return/Error'
  
  /v1/admin/quiz/{quizid}/thumbnail:
    put:
      summary: Update the quiz thumbnail
      description: |
        Update the thumbnail for the quiz.
        When this route is called, the timeLastEdited is updated.
      tags:
        # - "By Topic: Quiz Management"
        - "Iteration 2 (New)"
      parameters:
        - $ref: '#/components/path/QuizId'
        - $ref: '#/components/header/Session'
        - $ref: '#/components/body/QuizThumbnail'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        403:
          description: |
            - **INVALID_QUIZ_ID**
              - Valid session is provided, but user is not an owner of this quiz, or quiz doesn't exist
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            If any of the following are true:
            - **INVALID_THUMBNAIL**
              - The thumbnailUrl does not end with one of the following filetypes (case insensitive): jpg, jpeg, png
              - The thumbnailUrl does not begin with 'http://' or 'https://'
          schema:
            $ref: '#/components/return/Error'
  
  /v1/admin/quiz/{quizid}/question:
    post:
      summary: Create quiz question
      description: |
        Create a new stub question for a particular quiz.
        When this route is called, and a question is created, the timeLastEdited is set as the same as the created time, and the colours of all answers of that question are randomly generated.
      tags:
        # - "By Topic: Quiz Management"
        - "Iteration 2 (New)"
      parameters:
        - $ref: '#/components/path/QuizId'
        - $ref: '#/components/header/Session'
        - $ref: '#/components/body/QuizQuestionMutateIter3'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/QuizQuestionNew'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        403:
          description: |
            - **INVALID_QUIZ_ID**
              - Valid session is provided, but user is not an owner of this quiz, or quiz doesn't exist
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            If any of the following are true:
            - **INVALID_QUESTION**
              - Question string is less than 5 characters in length or greater than 50 characters in length
              - The points awarded for the question are less than 1 or greater than 10
            - **INVALID_ANSWERS**
              - The question has more than 6 answers or less than 2 answers
              - The length of any answer is shorter than 1 character long, or longer than 30 characters long
              - Any answer strings are duplicates of one another (within the same question)
              - There are no correct answers
            - **INVALID_TIMELIMIT**
              - The question timeLimit is not a positive number
              - The sum of the question timeLimits in the quiz exceeds 3 minutes
            - **INVALID_THUMBNAIL**
              - The thumbnailUrl is an empty string
              - The thumbnailUrl does not end with one of the following filetypes (case insensitive): jpg, jpeg, png
              - The thumbnailUrl does not begin with 'http://' or 'https://'
          schema:
            $ref: '#/components/return/Error'

  /v1/admin/quiz/{quizid}/question/{questionid}:
    put:
      summary: Update quiz question
      description: |
        Update the relevant details of a particular question within a quiz.
        When this route is called, the last edited time is updated, and the colours of all answers of that question are randomly generated.
      tags:
        # - "By Topic: Quiz Management"
        - "Iteration 2 (New)"
      parameters:
        - $ref: '#/components/path/QuizId'
        - $ref: '#/components/path/QuestionId'
        - $ref: '#/components/header/Session'
        - $ref: '#/components/body/QuizQuestionMutateIter3'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        403:
          description: |
            - **INVALID_QUIZ_ID**
              - Valid session is provided, but user is not an owner of this quiz, or quiz doesn't exist
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            If any of the following are true:
            - **INVALID_QUESTION_ID**
              - Question Id does not refer to a valid question within this quiz
            - **INVALID_QUESTION**
              - Question string is less than 5 characters in length or greater than 50 characters in length
              - The points awarded for the question are less than 1 or greater than 10
            - **INVALID_ANSWERS**
              - The question has more than 6 answers or less than 2 answers
              - The length of any answer is shorter than 1 character long, or longer than 30 characters long
              - Any answer strings are duplicates of one another (within the same question)
              - There are no correct answers
            - **INVALID_TIMELIMIT**
              - The question timeLimit is not a positive number
              - If this question were to be updated, the sum of the question timeLimits in the quiz exceeds 3 minutes
            - **INVALID_THUMBNAIL**
              - The thumbnailUrl is an empty string
              - The thumbnailUrl does not end with one of the following filetypes (case insensitive): jpg, jpeg, png
              - The thumbnailUrl does not begin with 'http://' or 'https://'
          schema:
            $ref: '#/components/return/Error'
    delete:
      summary: Delete quiz question
      description: Delete a particular question from a quiz
      tags:
        # - "By Topic: Quiz Management"
        - "Iteration 2 (New)"
      parameters:
        - $ref: '#/components/path/QuizId'
        - $ref: '#/components/path/QuestionId'
        - $ref: '#/components/header/Session'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        403:
          description: |
            - **INVALID_QUIZ_ID**
              - Valid session is provided, but user is not an owner of this quiz, or quiz doesn't exist
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            - **INVALID_QUESTION_ID**
              - Question Id does not refer to a valid question within this quiz
          schema:
            $ref: '#/components/return/Error'

  /v2/admin/quiz/{quizid}/question/{questionid}:
    delete:
      summary: Delete quiz question
      description: Delete a particular question from a quiz
      tags:
        # - "By Topic: Quiz Management"
        - "Iteration 3 (Modified)"
      parameters:
        - $ref: '#/components/path/QuizId'
        - $ref: '#/components/path/QuestionId'
        - $ref: '#/components/header/Session'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        403:
          description: |
            - **INVALID_QUIZ_ID**
              - Valid session is provided, but user is not an owner of this quiz, or quiz doesn't exist
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            If any of the following are true:
            - **INVALID_QUESTION_ID**
              - Question Id does not refer to a valid question within this quiz
            - **ACTIVE_GAME_EXISTS**
              - Any game for this quiz is not in END state
          schema:
            $ref: '#/components/return/Error'
      security:
        - Iteration 3 Session Authentication: []
  
  /v1/admin/quiz/{quizid}/games:
    get:
      summary: View active and inactive quiz games
      description: |
        Retrieves active and inactive game ids (sorted in ascending order) for a quiz
        - Active games are games that are not in the END state.
        - Inactive games are games in the END state.
      tags:
        # - "By Topic: Quiz Management"
        - "Iteration 3 (New)"
      parameters:
        - $ref: '#/components/header/Session'
        - $ref: '#/components/path/QuizId'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/QuizGamesList'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        403:
          description: |
            - **INVALID_QUIZ_ID**
              - Valid session is provided, but user is not an owner of this quiz, or quiz doesn't exist
          schema:
            $ref: '#/components/return/Error'
      security:
        - Iteration 3 Session Authentication: []
      
  /v1/admin/quiz/{quizid}/game/start:
    post:
      summary: Start a new game for a quiz
      description: This _copies_ the quiz, so that any edits whilst a game is running does not affect active game
      tags:
        # - "By Topic: Game Management"
        - "Iteration 3 (New)"
      parameters:
        - $ref: '#/components/path/QuizId'
        - $ref: '#/components/header/Session'
        - $ref: '#/components/body/QuizGameStartIter3'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/QuizGameStart'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        403:
          description: |
            - **INVALID_QUIZ_ID**
              - Valid session is provided, but user is not an owner of this quiz, or quiz doesn't exist
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            If any of the following are true:
            - **INVALID_GAME**
              - autoStartNum is a number greater than 50
            - **MAX_ACTIVATE_GAMES**
              - 10 games that are not in END state currently exist for this quiz
            - **QUIZ_IS_EMPTY**
              - The quiz does not have any questions in it
          schema:
            $ref: '#/components/return/Error'
      security:
        - Iteration 3 Session Authentication: []
  /v1/admin/quiz/{quizid}/game/{gameid}:
    put:
      summary: Update a quiz game state
      description: Update the state of a particular quiz game by sending an action command
      tags:
        # - "By Topic: Game Management"
        - "Iteration 3 (New)"
      parameters:
        - $ref: '#/components/path/QuizId'
        - $ref: '#/components/path/GameId'
        - $ref: '#/components/header/Session'
        - $ref: '#/components/body/QuizGameMutateIter3'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        403:
          description: |
            - **INVALID_QUIZ_ID**
              - Valid session is provided, but user is not an owner of this quiz, or quiz doesn't exist
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            If any of the following are true:
            - **INVALID_GAME_ID**
              - Game Id does not refer to a valid game within this quiz
            - **INVALID_ACTION**
              - Action provided is not a valid Action enum
            - **INCOMPATIBLE_GAME_STATE**
              - Action enum cannot be applied in the current state (see spec and miro for details)
          schema:
            $ref: '#/components/return/Error'
      security:
        - Iteration 3 Session Authentication: []
    get:
      summary: Get quiz game status
      description: Get the status of a particular quiz game
      tags:
        # - "By Topic: Game Management"
        - "Iteration 3 (New)"
      parameters:
        - $ref: '#/components/path/QuizId'
        - $ref: '#/components/path/GameId'
        - $ref: '#/components/header/Session'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/QuizGameStatus'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        403:
          description: |
            - **INVALID_QUIZ_ID**
              - Valid session is provided, but user is not an owner of this quiz, or quiz doesn't exist
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            If any of the following are true:
            - **INVALID_GAME_ID**
              - Game Id does not refer to a valid game within this quiz
          schema:
            $ref: '#/components/return/Error'
      security:
        - Iteration 3 Session Authentication: []
  
  /v2/admin/quiz/{quizid}:
    delete:
      summary: Delete a quiz
      description: Given a particular quiz, delete a quiz
      tags:
        # - "By Topic: Quiz Management"
        - "Iteration 3 (Modified)"
      parameters:
        - $ref: '#/components/path/QuizId'
        - $ref: '#/components/header/Session'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        400:
          description: |
            - **ACTIVE_GAME_EXISTS**
              - Any game for this quiz is not in END state
          schema:
            $ref: '#/components/return/Error'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        403:
          description: |
            - **INVALID_QUIZ_ID**
              - Valid session is provided, but user is not an owner of this quiz, or quiz doesn't exist
          schema:
            $ref: '#/components/return/Error'
      
  /v1/admin/quiz/{quizid}/game/{gameid}/results:
    get:
      summary: Get quiz game final results
      description: Get the final results for all players for a completed quiz game
      tags:
        # - "By Topic: Game Management"
        - "Iteration 3 (New)"
      parameters:
        - $ref: '#/components/path/QuizId'
        - $ref: '#/components/path/GameId'
        - $ref: '#/components/header/Session'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/ResultsFinal'
        401:
          description: |
            - **UNAUTHORISED**
              - Session is empty or invalid (does not refer to valid logged in user session)
          schema:
            $ref: '#/components/return/Error'
        403:
          description: |
            - **INVALID_QUIZ_ID**
              - Valid session is provided, but user is not an owner of this quiz, or quiz doesn't exist
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            If any of the following are true:
            - **INVALID_GAME_ID**
              - Game Id does not refer to a valid game within this quiz
            - **INCOMPATIBLE_GAME_STATE**
              - Game is not in FINAL_RESULTS state
          schema:
            $ref: '#/components/return/Error'
      security:
        - Iteration 3 Session Authentication: []


  /v1/player/join:
    post:
      summary: Allow a guest player to join a game
      description: |
        If the name entered is an empty string, a name must be randomly generated that conforms to the structure "[5 letters][3 numbers]" (e.g. valid123, ifjru483, ofijr938) where there are no repetitions of numbers or characters within the same name
      tags:
        - "Iteration 3 (New)"
        # - "By Topic: Playing a game"
      parameters:
        - $ref: '#/components/body/PlayerJoin'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/PlayerJoin'
        400:
          description: |
            If any of the following are true:
            - **INVALID_PLAYER_NAME**
              - Name contains invalid characters. Valid characters are alphanumeric and spaces.
              - Name of user entered is not unique (compared to other users who have already joined)
            - **INVALID_GAME_ID**
              - Game Id does not refer to a valid game
            - **INCOMPATIBLE_GAME_STATE**
              - Game is not in LOBBY state
          schema:
            $ref: '#/components/return/Error'
  /v1/player/{playerid}:
    get:
      summary: Status of guest player in game
      description: Get the status of a guest player that has already joined a game
      tags:
        # - "By Topic: Playing a game"
        - "Iteration 3 (New)"
      parameters:
        - $ref: '#/components/path/PlayerId'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/PlayerStatus'
        400:
          description: |
            If any of the following are true:
            - **INVALID_PLAYER_ID**
              - If player ID does not exist
          schema:
            $ref: '#/components/return/Error'
  /v1/player/{playerid}/question/{questionposition}:
    get:
      summary: Current question information for a player
      description: Get the information about a question that the guest player is on. Question position starts at 1
      tags:
        # - "By Topic: Playing a game"
        - "Iteration 3 (New)"
      parameters:
        - $ref: '#/components/path/PlayerId'
        - $ref: '#/components/path/QuestionPosition'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/group/QuizQuestionPublic'
        400:
          description: |
            If any of the following are true:
            - **INVALID_PLAYER_ID**
              - If player ID does not exist
            - **INVALID_POSITION**
              - If question position is not valid for the game this player is in
              - If game is not currently on this question
            - **INCOMPATIBLE_GAME_STATE**
              - Game is in LOBBY, QUESTION_COUNTDOWN, FINAL_RESULTS or END state
          schema:
            $ref: '#/components/return/Error'
  /v1/player/{playerid}/question/{questionposition}/answer:
    put:
      summary: Player submission of answers(s)
      description: |
        Allow the current player to submit answer(s) to the currently active question. Question position starts at 1
        Note: An answer can be re-submitted once first selection is made, as long as game is in the right state
      tags:
        # - "By Topic: Playing a game"
        - "Iteration 3 (New)"
      parameters:
        - $ref: '#/components/body/PlayerQuestionAnswer'
        - $ref: '#/components/path/PlayerId'
        - $ref: '#/components/path/QuestionPosition'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        400:
          description: |
            If any of the following are true:
            - **INVALID_PLAYER_ID**
              - If player ID does not exist
            - **INVALID_POSITION**
              - If question position is not valid for the game this player is in
              - If game is not currently on this question
            - **INCOMPATIBLE_GAME_STATE**
              - Game is not in QUESTION_OPEN state
            - **INVALID_ANSWER_IDS**
              - Answer IDs are not valid for this particular question
              - There are duplicate answer IDs provided
              - Less than 1 answer ID was submitted
          schema:
            $ref: '#/components/return/Error'
  /v1/player/{playerid}/question/{questionposition}/results:
    get:
      summary: Results for a question
      description: Get the results for a particular question of the game a player is playing in. Question position starts at 1
      tags:
        # - "By Topic: Playing a game"
        - "Iteration 3 (New)"
      parameters:
        - $ref: '#/components/path/PlayerId'
        - $ref: '#/components/path/QuestionPosition'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/group/QuestionResults'
        400:
          description: |
            If any of the following are true:
            - **INVALID_PLAYER_ID**
              - If player ID does not exist
            - **INVALID_POSITION**
              - If question position is not valid for the game this player is in
              - If game is not currently on this question
            - **INCOMPATIBLE_GAME_STATE**
              - Game is not in ANSWER_SHOW state
          schema:
            $ref: '#/components/return/Error'
  /v1/player/{playerid}/results:
    get:
      summary: Final results for a game
      description: Get the final results for a whole game a player is playing in
      tags:
        # - "By Topic: Playing a game"
        - "Iteration 3 (New)"
      parameters:
        - $ref: '#/components/path/PlayerId'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/ResultsFinal'
        400:
          description: |
            If any of the following are true:
            - **INVALID_PLAYER_ID**
              - If player ID does not exist
            - **INCOMPATIBLE_GAME_STATE**
              - Game is not in FINAL_RESULTS state
          schema:
            $ref: '#/components/return/Error'

  /v1/clear:
    delete:
      summary: Reset the state of the application back to the start/its initial state.
      description: Wipe all details (users, quizzes) back to the beggining as if the data structure is fresh.
      tags:
        # - "By Topic: Other"
        - "Iteration 2 (Using Iteration 1)"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
            
